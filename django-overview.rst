High Level Overview of Django
=============================


.. image:: img/overview.png

Django is an application framework based on the Model, View, Controller (MVC)
concept.

As we can see in the above diagram, a typical application workflow is as
follows:

* A user opens their browser and points it at a django url
* The url **request** is transported via the http:// protocol to a host
* The host runs a web server such as apache with the **mod_python** module
  installed receives the request and passes it into the django application
* Before django does anything with the request, it passes it through 0 or more
  **middleware layers** which  if needed clean up or pre-parse the http request
* The middleware then forwards the request to the **controller**
* The controller looks at the url structure (e.g.
  http://somehost.com/doodle/makedoodle/) and determines which **view** is
  associated with the request
* The view (e.g. makedoodle) typically will create or instantiate a **model**
  (e.g.  a doodle model)
* The view then typically will use a **template** to render the model as an
  html web page
* The template may include reusable snippets called **templatetags** for
  commonly repeated html phrases
* If the view requires user input, it can do this by creating a **form**
  instance and rendering the form into the template
* Forms are autogenerated using standard widgets (button, input, select etc) or
  you can create **custom widgets**
* Once the response is rendered by the view, it is passed on to the 
  **middleware** layer
* The middleware can post-parse the response (e.g. to format it nicely) before
  sending it back to the **web server**
* The web server passes the response over the http:// protocol to the client
  browser
* The user sees a page appear in the browser

You will notice quite a few 'typically' and 'can' qualifiers in the above
scenario. This is because, Django is extremely flexible and you can adapt this
work flow according to your needs. This includes e.g. having a view return a
response without using any models, any forms, any templates. Similarly
templates need not use custom templatetags, forms need not use custom widgets
etc.

Now that we have an overview in place, lets dive in and try Django out!

